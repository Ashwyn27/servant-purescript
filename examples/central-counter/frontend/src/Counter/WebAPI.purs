-- File auto generated by servant-purescript! --
module Counter.WebAPI where

import Prelude

import Control.Monad.Aff.Class (class MonadAff, liftAff)
import Control.Monad.Error.Class (class MonadError)
import Control.Monad.Reader.Class (ask, class MonadReader)
import Counter.ServerTypes (AuthToken, CounterAction)
import Data.Nullable (Nullable(), toNullable)
import Global (encodeURIComponent)
import Network.HTTP.Affjax (AJAX)
import Prim (Int, String)
import Servant.PureScript.Affjax (AjaxError(..), affjax, defaultRequest)
import Servant.PureScript.Settings (SPSettings_(..))
import Servant.PureScript.Util (encodeListQuery, encodeQueryItem, getResult)
import Unsafe.Coerce (unsafeCoerce)

newtype SPParams_ = SPParams_ { authToken :: AuthToken
                              , baseURL :: String
                              }

getCounter :: forall eff m.
           (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
           => m Int
getCounter = do
  SPSettings_ spOpts_ <- ask
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authToken = spParams_.authToken
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqUrl = baseURL <> "counter"
  let reqHeaders =
        [{ field : "AuthToken"
         , value : (encodeURIComponent <<< unsafeCoerce spOpts_.toURLPiece) authToken
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = reqHeaders
                                }
  getResult (unsafeCoerce spOpts_.decodeJson) affResp
  
putCounter :: forall eff m.
           (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
           => CounterAction -> m Int
putCounter reqBody = do
  SPSettings_ spOpts_ <- ask
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authToken = spParams_.authToken
  let baseURL = spParams_.baseURL
  let httpMethod = "PUT"
  let reqUrl = baseURL <> "counter"
  let reqHeaders =
        [{ field : "AuthToken"
         , value : (encodeURIComponent <<< unsafeCoerce spOpts_.toURLPiece) authToken
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = reqHeaders
                                , content = unsafeCoerce spOpts_.encodeJson reqBody
                                }
  getResult (unsafeCoerce spOpts_.decodeJson) affResp
  
