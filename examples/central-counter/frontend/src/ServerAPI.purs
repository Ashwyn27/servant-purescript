-- File auto generated by servant-purescript! --
module ServerAPI where

import Control.Monad.Aff.Class (class MonadAff)
import Control.Monad.Error.Class (class MonadError)
import Control.Monad.Reader.Class (class MonadReader)
import Counter.ServerTypes (AuthToken, CounterAction)
import Data.Nullable (Nullable(), toNullable)
import Global (encodeURIComponent)
import Network.HTTP.Affjax (AJAX)
import Prelude (Unit(..))
import Prim (Int)
import Servant.PureScript.Affjax (affjax, defaultRequest)
import Servant.PureScript.Settings (Settings)
import Servant.PureScript.Util (encodeListQuery, encodeQueryItem, getResult)

type Params = { authToken :: AuthToken
              }

getCounter :: forall eff m.
           (MonadReader (Settings Params) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
           => String -> m Int
getCounter baseURL = do
  spOpts_ <- ask
  let authToken = spOpts_.params.authToken
  let httpMethod = "GET"
  let reqUrl = spOpts_.baseURL <> "counter"
  let reqHeaders =
        [{ field : "AuthToken"
         , value : (encodeURIComponent <<< spOpts_.toURLPiece) authToken
         }]
  affResp <- affjax defaultRequest
        { method : httpMethod
        , url : reqUrl
        , headers : reqHeaders
        }
  getResult affResp
  
putCounter :: forall eff m.
           (MonadReader (Settings Params) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
           => String -> CounterAction -> m Int
putCounter baseURL reqBody = do
  spOpts_ <- ask
  let authToken = spOpts_.params.authToken
  let httpMethod = "PUT"
  let reqUrl = spOpts_.baseURL <> "counter"
  let reqHeaders =
        [{ field : "AuthToken"
         , value : (encodeURIComponent <<< spOpts_.toURLPiece) authToken
         }]
  affResp <- affjax defaultRequest
        { method : httpMethod
        , url : reqUrl
        , headers : reqHeaders
        , content : spOpts_.encodeJson reqBody
        }
  getResult affResp
  
